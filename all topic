-----Lower Bound---
**using by fuction: int in=lower_bound(v.begin(),v.end(),"value")-v.begin();
int l,r;
int t,ans=1e5+0;
while(l<=r)
{
  int mid=(l+r)/2;
  if(a[mid]>=t)
  {
   ans=min(ans,mid);
    r=mid-1;// go to left side
  }
  else l=mid+1;// go to right side
}
cout<<ans<<endl;

---UpperBound---

**using by fuction: int in=upper_bound(v.begin(),v.end(),"value")-v.begin();

 int l=0,r=9;
int t=3,ans=1e5+0;
while(l<=r)
{
  int mid=(l+r)/2;
  if(a[mid]<=t)
  {
 
    l=mid+1;// go to right side
  }
  else
  {
    ans=min(mid,ans);
    r=mid-1;
    // go to left side
}

  
}
cout<<ans<<endl;
}


-----BigMode--
formula: 
if x=m*n then mod of x is (m mod * n mod)mod

by recursive method:
int bigMod(int a,int b,int m)
{
  if(b==0) return 1%m;
  int x= bigMod(a,b/2,m);
   cout<<"x0 = "<<x<<endl;
  x=(x*x)%m;
  cout<<"x1 = "<<x<<endl;
  cout<<"b = "<<b<<endl;
  if(b%2==1) 
  { x=(x*a)%m;
    cout<<" if block x2 = "<<x<<endl;
  }

  cout<<"x3 = "<<x<<endl;
  return x;

}
main()
{
 
  int a,b,m;
  cin>>a>>b>>m;

  
  cout<<bigMod(a,b,m);
 




}
